{"version":3,"sources":["components/head/index.js","components/star/Star.js","components/button/index.js","components/closeButton/index.js","container/modal/index.js","Rating.js","serviceWorker.js","index.js"],"names":["Head","react_default","a","createElement","className","Star","props","xmlns","viewBox","width","height","d","Button","name","CloseButton","fill","Modal","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getStars","console","log","state","visible","modalClasses","classNames","hide","modal-container","closeButton","Star_Star","onClick","bind","components_button","class","Component","Rating","onClickHandler","modalVisible","rateUsButtonVisible","btn","button-container","primary","head","container_modal","Boolean","window","location","hostname","match","ReactDOM","render","src_Rating","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17df64e1.chunk.js","sourcesContent":["import React from 'react';\nimport './style.scss';\n\nconst Head = () =>{\n  return(\n    <header className=\"app-header\">\n      <h1>Rate our food App</h1>\n    </header>\n  )\n};\n\nexport default Head;\n","import React from 'react';\nimport './style.scss';\n\nexport const Star= (props) => {\n    return(\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 55.867 55.867\" width={props.width} height={props.height}>\n      <path d=\"M11.287 54.548a.997.997 0 0 1-.985-1.169l3.091-18.018L.302 22.602a1.001 1.001 0 0 1 .555-1.705l18.09-2.629 8.091-16.393a.996.996 0 1 1 1.792 0l8.09 16.393 18.091 2.629a1.002 1.002 0 0 1 .555 1.705L42.475 35.363l3.09 18.017c.064.375-.09.754-.397.978a.993.993 0 0 1-1.054.076l-16.18-8.506-16.182 8.506a1.008 1.008 0 0 1-.465.114zM3.149 22.584l12.016 11.713a1 1 0 0 1 .287.885L12.615 51.72l14.854-7.808a.996.996 0 0 1 .931 0l14.852 7.808-2.836-16.538a1 1 0 0 1 .287-.885l12.016-11.713-16.605-2.413a1 1 0 0 1-.753-.547L27.934 4.578l-7.427 15.047a1 1 0 0 1-.753.547L3.149 22.584z\"/>\n      </svg>\n    );\n};\n\nexport const StarColored = (props) =>{\n  return(\n    <svg viewBox=\"0 0 55.867 55.867\" width={props.width} height={props.height}>\n    <path d=\"M11.287 54.548a.997.997 0 0 1-.985-1.169l3.091-18.018L.302 22.602a1.001 1.001 0 0 1 .555-1.705l18.09-2.629 8.091-16.393a.996.996 0 1 1 1.792 0l8.09 16.393 18.091 2.629a1.002 1.002 0 0 1 .555 1.705L42.475 35.363l3.09 18.017c.064.375-.09.754-.397.978a.993.993 0 0 1-1.054.076l-16.18-8.506-16.182 8.506a1.008 1.008 0 0 1-.465.114zM3.149 22.584l12.016 11.713a1 1 0 0 1 .287.885L12.615 51.72l14.854-7.808a.996.996 0 0 1 .931 0l14.852 7.808-2.836-16.538a1 1 0 0 1 .287-.885l12.016-11.713-16.605-2.413a1 1 0 0 1-.753-.547L27.934 4.578l-7.427 15.047a1 1 0 0 1-.753.547L3.149 22.584z\" fill={props.color}/>\n    </svg>\n  )\n};\n","import React from 'react';\nimport './style.scss';\n\nconst Button = (props) => {\n  return(\n    <button className=\"button primary\">\n      {props.name}\n    </button>\n  )\n}\n\nexport default Button\n","import React from 'react';\nimport './style.scss';\n\nconst CloseButton = (props) => {\n  return(\n  <svg className=\"closeButton\" width={props.width} height={props.height} viewBox=\"0 0 612.043 612.043\">\n  <path d=\"M397.503 306.011L593.08 110.434c25.27-25.269 25.27-66.213 0-91.482-25.269-25.269-66.213-25.269-91.481 0L306.022 214.551 110.445 18.974c-25.269-25.269-66.213-25.269-91.482 0s-25.269 66.213 0 91.482L214.54 306.033 18.963 501.61c-25.269 25.269-25.269 66.213 0 91.481 25.269 25.27 66.213 25.27 91.482 0l195.577-195.576 195.577 195.576c25.269 25.27 66.213 25.27 91.481 0 25.27-25.269 25.27-66.213 0-91.481L397.503 306.011z\" fill=\"#FFF\"/>\n  </svg>\n  );\n};\n\nexport default CloseButton\n","import React, { Component } from 'react';\nimport classNames from 'classnames'\nimport { Star } from '../../components/star/Star';\nimport Button from '../../components/button';\nimport CloseButton from '../../components/closeButton'\nimport './style/modal.scss';\n\nclass Modal extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      visible : true\n    }\n\n\n  }\n\n  getStars = () => {\n    console.log('stars collected');\n  }\n\n  render(){\n\n    const modalClasses = classNames({\n      \"hide\": this.state.visible,\n      \"modal-container\": true\n    })\n    return (\n      <section className={modalClasses}>\n        <CloseButton width=\"20\" height=\"20\"/>\n\n        <header className=\"header\">\n          <h2>How did we do?</h2>\n        </header>\n\n        <p>Please let us know how your food delivery was. It will really help us to improve our service!</p>\n\n        <div className=\"ratings-container\">\n          <p>How would you rate your food?</p>\n          <div className=\"stars\">\n              <Star width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n          </div>\n\n          <p>How would you rate your delivery driver?</p>\n          <div className=\"stars\">\n              <Star onClick={this.getStars.bind(this)} width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n          </div>\n\n          <p>How would you rate your overall experience</p>\n          <div className=\"stars\">\n              <Star width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n              <Star width=\"20\" height=\"20\"/>\n          </div>\n        </div>\n\n        <Button class=\"primary\" onClick={this.getStars.bind(this)} name=\"Submit feedback\"/>\n      </section>\n    )\n  };\n};\n\nexport default Modal\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport Head from './components/head'\nimport Modal from './container/modal/';\nimport Button from './components/button'\nimport './rating.scss';\n\nclass Rating extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      modalVisible : true,\n      rateUsButtonVisible: false\n    }\n\n  }\n\n  onClickHandler = () => {\n    console.log(`hello`);\n  }\n\n  render() {\n\n    const btn = classNames({\n      \"button-container\": true,\n      \"primary\": true,\n      \"hide\": this.state.rateUsButtonVisible\n    })\n    return (\n      <div className=\"Rating\">\n        <Head/>\n        \n        {/* Modal Component*/}\n        <Modal/>\n        <div className={btn}>\n          <Button onClick={this.onClickHandler.bind(this)} name=\"Please Rate Us\"/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Rating;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Rating from './Rating';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Rating />,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}