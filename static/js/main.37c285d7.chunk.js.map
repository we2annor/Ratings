{"version":3,"sources":["components/head/index.js","components/star/Star.js","components/rating/index.js","components/button/index.js","components/closeButton/index.js","container/modal/index.js","Rating.js","serviceWorker.js","index.js"],"names":["Head","react_default","a","createElement","className","Star","props","classNames","defaultStyle","color","outlineColor","activeStyle","style","active","xmlns","viewBox","width","height","d","fill","stroke","RatingStars","stars","i","max","star","id","rating","push","onClick","e","console","log","currentTarget","dataset","map","index","Star_Star","key","data-id","fillColor","Button","buttonStyles","button","primary","layout","name","CloseButton","Modal","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCloseButtonClicked","getRating","getStars","state","visible","modalClasses","hide","modal-container","closeButton","bind","components_button","class","Component","Rating","onClickHandler","modalVisible","setState","prevState","rateUsButtonVisible","button-container","head","container_modal","toString","Boolean","window","location","hostname","match","ReactDOM","render","src_Rating","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37c285d7.chunk.js","sourcesContent":["import React from 'react';\nimport './style.scss';\n\nconst Head = () =>{\n  return(\n    <header className=\"app-header\">\n      <h1>Rate our food App</h1>\n    </header>\n  )\n};\n\nexport default Head;\n","import React from 'react';\nimport classNames from 'classnames'\nimport './style.scss';\n\nexport const Star= (props) => {\n\n  const classes = classNames('star');\n  const defaultStyle = {\n    color: '#FFF',\n    outlineColor : props.outlineColor || '#979797'\n  }\n\n  const activeStyle = {\n    color: props.color || '#FFC80A',\n    outlineColor : props.color || '#FFC80A'\n  }\n\n  const style = (props.active) ? activeStyle : defaultStyle;\n\n    return(\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 55.867 55.867\" width={props.width} height={props.height}>\n      <path d=\"M11.287 54.548a.997.997 0 0 1-.985-1.169l3.091-18.018L.302 22.602a1.001 1.001 0 0 1 .555-1.705l18.09-2.629 8.091-16.393a.996.996 0 1 1 1.792 0l8.09 16.393 18.091 2.629a1.002 1.002 0 0 1 .555 1.705L42.475 35.363l3.09 18.017c.064.375-.09.754-.397.978a.993.993 0 0 1-1.054.076l-16.18-8.506-16.182 8.506a1.008 1.008 0 0 1-.465.114zM3.149 22.584l12.016 11.713a1 1 0 0 1 .287.885L12.615 51.72l14.854-7.808a.996.996 0 0 1 .931 0l14.852 7.808-2.836-16.538a1 1 0 0 1 .287-.885l12.016-11.713-16.605-2.413a1 1 0 0 1-.753-.547L27.934 4.578l-7.427 15.047a1 1 0 0 1-.753.547L3.149 22.584z\" fill={style.color} stroke={style.outlineColor}/>\n      </svg>\n    );\n};\n\nexport const StarColored = (props) =>{\n  return(\n    <svg viewBox=\"0 0 55.867 55.867\" width={props.width} height={props.height}>\n    <path d=\"M11.287 54.548a.997.997 0 0 1-.985-1.169l3.091-18.018L.302 22.602a1.001 1.001 0 0 1 .555-1.705l18.09-2.629 8.091-16.393a.996.996 0 1 1 1.792 0l8.09 16.393 18.091 2.629a1.002 1.002 0 0 1 .555 1.705L42.475 35.363l3.09 18.017c.064.375-.09.754-.397.978a.993.993 0 0 1-1.054.076l-16.18-8.506-16.182 8.506a1.008 1.008 0 0 1-.465.114zM3.149 22.584l12.016 11.713a1 1 0 0 1 .287.885L12.615 51.72l14.854-7.808a.996.996 0 0 1 .931 0l14.852 7.808-2.836-16.538a1 1 0 0 1 .287-.885l12.016-11.713-16.605-2.413a1 1 0 0 1-.753-.547L27.934 4.578l-7.427 15.047a1 1 0 0 1-.753.547L3.149 22.584z\" fill={props.color}/>\n    </svg>\n  )\n};\n","import React from 'react';\nimport { Star } from '../star/Star'\n\nconst RatingStars = (props) => {\n\n    const stars=[];\n\n    for(let i = 1; i < props.max + 1; i++){\n      let star = {\n        active: false,\n        id: i\n      }\n\n      if(i <= props.rating){\n        star.active = true;\n        star.id = i+1\n      }\n\n      stars.push(star)\n    }\n\n    const onStarClickHandler = (e) => {\n      let starCount = 0;\n      console.log(e.currentTarget.dataset.id)\n    }\n\n  return(\n    <div className=\"ratingStars\" onClick={onStarClickHandler}>\n      {stars.map((star, index) => (\n        <Star\n          key={index}\n          data-id ={index}\n          color={props.color}\n          outlineColor = {props.outlineColor}\n          active = {star.active}\n          width={props.width}\n          height={props.height}\n          fillColor={props.fillColor}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default RatingStars\n","import React from 'react';\nimport classNames from 'classnames';\nimport './style.scss';\n\nconst Button = (props) => {\n\n  const buttonStyles = classNames({\n    \"button\": true,\n    \"primary\": true,\n    \"layout\": true\n  })\n\n  return(\n      <button className={buttonStyles}>\n        {props.name}\n      </button>\n  );\n};\n\nexport default Button\n","import React from 'react';\nimport './style.scss';\n\nconst CloseButton = (props) => {\n  return(\n  <svg className=\"closeButton\" width={props.width} height={props.height} viewBox=\"0 0 612.043 612.043\">\n  <path d=\"M397.503 306.011L593.08 110.434c25.27-25.269 25.27-66.213 0-91.482-25.269-25.269-66.213-25.269-91.481 0L306.022 214.551 110.445 18.974c-25.269-25.269-66.213-25.269-91.482 0s-25.269 66.213 0 91.482L214.54 306.033 18.963 501.61c-25.269 25.269-25.269 66.213 0 91.481 25.269 25.27 66.213 25.27 91.482 0l195.577-195.576 195.577 195.576c25.269 25.27 66.213 25.27 91.481 0 25.27-25.269 25.27-66.213 0-91.481L397.503 306.011z\" fill=\"#FFF\"/>\n  </svg>\n  );\n};\n\nexport default CloseButton\n","import React, { Component } from 'react';\nimport classNames from 'classnames'\nimport { Star } from '../../components/star/Star';\nimport RatingStars from '../../components/rating'\nimport Button from '../../components/button';\nimport CloseButton from '../../components/closeButton'\nimport './style/modal.scss';\n\nclass Modal extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      visible : false,\n    }\n  }\n\n  onCloseButtonClicked = () => {\n    console.log('closed button clicked')\n  }\n\n  getRating = () => {\n\n  }\n\n  getStars = () => {\n    console.log('stars collected');\n  }\n\n  render(){\n\n    const modalClasses = classNames({\n      hide: this.state.visible,\n      \"modal-container\": true,\n    })\n\n\n    return (\n      <section visible={this.props.visible} className={modalClasses}>\n        <CloseButton onClick={this.onCloseButtonClicked.bind(this)} width=\"20\" height=\"20\"/>\n\n        <header className=\"header\">\n          <h2>How did we do?</h2>\n        </header>\n\n        <p>Please let us know how your food delivery was. It will really help us to improve our service!</p>\n\n        <div className=\"ratings-container\">\n          <p>How would you rate your food?</p>\n          <div className=\"stars\">\n\n              <RatingStars id=\"food\" width =\"19\" height=\"19\"\n                color=\"#FFC80A\"\n                outlineColor=\"#979797\"\n                max={5}\n                rating={2}\n              />\n          </div>\n\n          <p>How would you rate your delivery driver?</p>\n          <div className=\"stars\">\n            <RatingStars id=\"driver\" width =\"19\" height=\"19\"\n            color=\"#FFC80A\"\n            outlineColor=\"#979797\"\n            max={5}\n            rating={4}\n            />\n          </div>\n\n          <p>How would you rate your overall experience</p>\n          <div className=\"stars\">\n            <RatingStars id=\"experience\" width =\"19\" height=\"19\"\n            color=\"#FFC80A\"\n            outlineColor=\"#979797\"\n            max={5}\n            rating={4}\n            />\n          </div>\n        </div>\n\n        <Button class=\"primary\" onClick={this.getStars.bind(this)} name=\"Submit feedback\"/>\n      </section>\n    )\n  };\n};\n\nexport default Modal\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport Head from './components/head'\nimport Modal from './container/modal/';\nimport Button from './components/button'\nimport './rating.scss';\n\nclass Rating extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      modalVisible : false,\n      rateUsButtonVisible: true\n    }\n  }\n\n  onClickHandler = () => {\n    const toggleVisibility = this.state.modalVisible ? false : true;\n    this.setState((prevState) => ({modalVisible: !prevState.modalVisible}));\n  }\n\n  render() {\n\n    const btn = classNames({\n      \"button-container\": true,\n      \"primary\": true,\n      \"hide\": this.state.modalVisible\n    })\n    return (\n      <div className=\"Rating\">\n        <Head/>\n\n        {/* Modal Component*/}\n        <Modal visible={this.state.modalVisible.toString()}/>\n\n        <div className=\"button-container\" onClick={this.onClickHandler.bind(this)}>\n          <Button name=\"Please Rate Us\"/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Rating;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Rating from './Rating';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Rating />,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}