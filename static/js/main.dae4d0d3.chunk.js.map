{"version":3,"sources":["components/head/Head.js","components/star/Star.js","components/rating/Rating.js","components/button/Button.js","components/closeButton/CloseButton.js","container/modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Head","react_default","a","createElement","className","Star","props","defaultStyle","color","outlineColor","activeStyle","style","active","width","height","viewBox","onClick","selectRating","questionIndex","starIndex","stroke","strokeWidth","fill","fillRule","transform","points","Rating","stars","i","max","star","rating","push","map","index","Star_Star","key","fillColor","Button","buttonStyles","classNames","button","primary","layout","name","CloseButton","d","Modal","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submit","state","questions","setState","question","_this2","closeButton_CloseButton","hideModal","Fragment","rating_Rating","button_Button","Component","App","showModal","modalVisible","submitted","submitJSON","JSON","stringify","btn","button-container","hide","head_Head","modal_Modal","maxWidth","margin","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dae4d0d3.chunk.js","sourcesContent":["import React from 'react';\nimport './style.scss';\n\nconst Head = () =>{\n  return(\n    <header className=\"app-header\">\n      <h1>Rate our food App</h1>\n    </header>\n  )\n};\n\nexport default Head;\n","import React from 'react';\nimport './Star.scss';\n\nexport const Star= (props) => {\n\n  const defaultStyle = {\n    color: '#FFF',\n    outlineColor : props.outlineColor || '#979797'\n  }\n\n  const activeStyle = {\n    color: props.color || '#FFC80A',\n    outlineColor : props.color || '#FFC80A'\n  }\n\n  const style = (props.active) ? activeStyle : defaultStyle;\n\n    return(\n      <svg className=\"star\" width={props.width} height={props.height} viewBox=\"0 0 18 18\"\n        onClick={() => { props.selectRating(props.questionIndex, props.starIndex + 1) }}>\n          <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n              <g transform=\"translate(-792.000000, -174.000000)\" fill={style.color} stroke={style.outlineColor}>\n                  <g transform=\"translate(719.000000, 174.000000)\">\n                      <polygon points=\"83.499 8.296 84.325 13 79.999 10.78 75.672 13 76.498 8.296 72.998 4.966 77.836 4.279 79.999 0 82.162 4.279 87 4.966\"></polygon>\n                  </g>\n              </g>\n          </g>\n      </svg>\n    );\n};\n","import React from 'react';\nimport { Star } from '../star/Star'\n\nconst Rating = (props) => {\n\n    const stars=[];\n\n    for(let i = 1; i < props.max + 1; i++){\n      let star = {\n        active: false,\n      }\n\n      if(i <= props.rating){\n        star.active = true;\n      }\n\n      stars.push(star)\n    }\n\n  return(\n    <div className=\"ratingStars\">\n      {stars.map((star, index) => (\n        <Star\n          key={index}\n          questionIndex={props.questionIndex}\n          starIndex = {index}\n          color={props.color}\n          outlineColor = {props.outlineColor}\n          active = {star.active}\n          width={props.width}\n          height={props.height}\n          fillColor={props.fillColor}\n          selectRating={props.selectRating}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default Rating\n","import React from 'react';\nimport classNames from 'classnames';\nimport './style.scss';\n\nconst Button = (props) => {\n\n  const buttonStyles = classNames({\n    \"button\": true,\n    \"primary\": true,\n    \"layout\": true\n  })\n\n  return(\n      <button className={buttonStyles} onClick={props.onClick}>\n        {props.name}\n      </button>\n  );\n};\n\nexport default Button\n","import React from 'react';\nimport './style.scss';\n\nconst CloseButton = (props) => {\n  return(\n  <svg className=\"closeButton\" width={props.width} height={props.height} viewBox=\"0 0 612.043 612.043\" onClick={props.onClick}>\n  <path d=\"M397.503 306.011L593.08 110.434c25.27-25.269 25.27-66.213 0-91.482-25.269-25.269-66.213-25.269-91.481 0L306.022 214.551 110.445 18.974c-25.269-25.269-66.213-25.269-91.482 0s-25.269 66.213 0 91.482L214.54 306.033 18.963 501.61c-25.269 25.269-25.269 66.213 0 91.481 25.269 25.27 66.213 25.27 91.482 0l195.577-195.576 195.577 195.576c25.269 25.27 66.213 25.27 91.481 0 25.27-25.269 25.27-66.213 0-91.481L397.503 306.011z\" fill=\"#FFF\"/>\n  </svg>\n  );\n};\n\nexport default CloseButton\n","import React, { Component } from 'react';\nimport Rating from '../../components/rating/Rating'\nimport Button from '../../components/button/Button';\nimport CloseButton from '../../components/closeButton/CloseButton';\nimport './style/Modal.scss';\n\nclass Modal extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      questions : [\n        {\n          question: 'How would you rate your food?',\n          rating: 0\n        },\n        {\n          question: 'How would you rate your delivery driver?',\n          rating: 0\n        },\n        {\n          question: 'How would you rate your overall experience?',\n          rating: 0\n        }\n      ]\n    }\n  }\n\n  submit = () => {\n    this.props.submit(this.state.questions)\n  }\n\n  selectRating = (questionIndex, rating) => {\n    const questions = this.state.questions;\n    questions[questionIndex].rating = rating;\n\n    this.setState({\n      questions\n    })\n  }\n\n  render(){\n\n    return (\n      <section className=\"modal-container\">\n        <CloseButton onClick={this.props.hideModal} width=\"20\" height=\"20\"/>\n\n        <header className=\"header\">\n          <h2>How did we do?</h2>\n        </header>\n\n        <p>Please let us know how your food delivery was. It will really help us to improve our service!</p>\n\n        <div className=\"ratings-container\">\n\n        {this.state.questions.map((question, index)=>(\n          <React.Fragment>\n            <p>{question.question}</p>\n            <div className=\"stars\">\n\n                <Rating width =\"30\" height=\"30\"\n                  color=\"#FFC80A\"\n                  outlineColor=\"#979797\"\n                  active={true}\n                  max={5}\n                  questionIndex={index}\n                  rating={question.rating}\n                  selectRating={this.selectRating}\n                />\n            </div>\n          </React.Fragment>\n        ))\n        }\n      </div>\n\n      <Button onClick={this.submit} name=\"Submit feedback\"/>\n      </section>\n    )\n  };\n};\n\nexport default Modal\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport Head from './components/head/Head'\nimport Modal from './container/modal/Modal';\nimport Button from './components/button/Button'\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      modalVisible : false,\n      submitted : false,\n      submitJSON: ''\n    }\n  }\n\n  showModal = () => {\n    this.setState({\n      modalVisible: true\n    })\n  }\n\n  hideModal = () => {\n    this.setState({\n      modalVisible: false\n    })\n  }\n\n  submit = (questions) => {\n    this.hideModal();\n\n    this.setState({\n      submitted: true,\n      submitJSON : JSON.stringify(questions),\n    })\n  }\n\n  render() {\n    const btn = classNames({\n      \"button-container\": true,\n      \"primary\": true,\n      \"hide\": this.state.modalVisible\n    })\n\n    return (\n      <div className=\"Rating\">\n        <Head/>\n        {this.state.modalVisible && (\n          <Modal hideModal={this.hideModal} submit={this.submit}/>\n        )}\n\n        {!this.state.modalVisible && (\n          <div className={btn} onClick={this.showModal}>\n            <Button name=\"Please Rate Us\"/>\n          </div>\n        )}\n\n        {this.state.submitted && this.state.submitJSON && (\n          <div className=\"submitted\" style={{ maxWidth: 500, margin: 'auto', paddingTop: 100 }}>\n            <h2>Thank you</h2>\n            <p>{this.state.submitJSON}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}